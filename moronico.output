Nonterminals useless in grammar

   programa
   definicion_programa
   nombre
   identificador_cuatro_ptos_asterisco
   bloque_programa
   $@1
   declaracion_cargas_interrogacion
   declaracion_tipos_interrogacion
   declaracion_constantes_interrogacion
   declaracion_variables_interrogacion
   bloque_instrucciones
   instruccion_mas
   definicion_paquete
   seccion_cabecera
   $@2
   declaracion_interfaces_interrogacion
   seccion_cuerpo
   $@3
   declaracion_subprograma_mas
   declaracion_cargas
   declaracion_carga_mas
   declaracion_carga
   en_path_interrogacion
   nombre_mas
   nombre_mas_interrogacion
   declaracion_tipos
   declaracion_tipo_mas
   declaracion_tipo
   tipo_no_estructurado_o_nombre_tipo
   tipo_estructurado
   tipo_escalar
   tipo_fichero
   tipo_enumerado
   expresion_constante_mas
   tipo_lista
   rango_mas
   rango_mas_interrogacion
   rango
   expresion_interrogacion_ptos
   tipo_lista_asociativa
   tipo_conjunto
   tipo_registro
   declaracion_campo_mas
   declaracion_campo
   expresion
   declaracion_clase
   $@4
   final_interrogacion
   declaraciones_semi_interrogacion
   declaraciones_privadas_interrogacion
   declaraciones_publicas
   declaraciones_semi
   declaraciones_privadas
   publico_interrogacion
   declaracion_componente_mas
   declaracion_componente
   modificadores_interrogacion
   declaracion_tipo_anidado
   declaracion_constante_anidada
   declaracion_atributos
   modificadores
   modificador_mas
   modificador
   declaracion_constantes
   declaracion_constante_mas
   declaracion_constante
   valor_constante
   valor_constante_mas
   clave_valor_mas
   campo_valor_mas
   clave_valor
   campo_valor
   declaracion_variables
   declaracion_variable_mas
   declaracion_variable
   $@5
   valor_constante_interrogacion
   declaracion_interfaces
   cabecera_subprograma_mas
   declaracion_subprograma
   cabecera_subprograma
   cabecera_funcion
   $@6
   declaracion_parametros_interrogacion
   cabecera_procedimiento
   cabecera_constructor
   cabecera_destructor
   declaracion_parametros
   lista_parametros_formales
   parametros_formales
   modificable_interrogacion
   bloque_subprograma
   $@7
   instruccion
   instruccion_asignacion
   instruccion_salir
   si_expresion_interrogacion
   instruccion_devolver
   expresion_interrogacion
   instruccion_llamada
   llamada_subprograma
   expresion_asterisco
   instruccion_si
   $@8
   $@9
   bloque_instrucciones_sino_interrogacion
   instruccion_casos
   caso_mas
   caso
   entradas
   entrada_asterisco
   entrada
   instruccion_bucle
   clausula_iteracion
   descendente_interrogacion
   instruccion_probar_excepto
   $@10
   $@11
   clausula_excepcion_mas
   bloque_instrucciones_final_interrogacion
   clausula_excepcion
   instruccion_lanzar
   expresion_primaria
   objeto
   expresion_unaria
   expresion_binaria
   expresion_mas


Terminals unused in grammar

   ABSTRACTO
   AND
   ASOCIATIVA
   BOOLEANO
   CABECERA
   CADENA
   CASO
   CARACTER
   CARGA
   CLASE
   CONJUNTO
   CONSTANTE
   CUERPO
   CONSTRUCTOR
   CUANDO
   CUATRO_PTOS
   DESCENDENTE
   DESPD
   DESPI
   DESTRUCTOR
   DE
   DEVOLVER
   DOS_PTOS
   EJECUTA
   ELEMENTO
   EN
   ENTERO
   ENTONCES
   EQ
   ESPECIFICO
   EXCEPTO
   FICHERO
   FINAL
   FINALMENTE
   FLECHA_DOBLE
   FUNCION
   GEQ
   GENERICO
   HASTA
   IDENTIFICADOR
   INTERFAZ
   LANZAR
   LEQ
   LISTA
   MIENTRAS
   MODIFICABLE
   NEQ
   OTRO
   OR
   PAQUETE
   PARA
   PATH
   POTENCIA
   PRIVADO
   PROBAR
   PROCEDIMIENTO
   PROGRAMA
   PUBLICO
   REAL
   REGISTRO
   REPITE
   SEA
   SALIR
   SEMIPUBLICO
   SI
   SINO
   TIPO
   VARIABLE
   '-'
   '!'
   '*'
   '/'
   '%'
   ';'
   '{'
   '}'
   '('
   ')'
   '='
   '['
   ']'
   ':'
   '|'
   '.'


Rules useless in grammar

    6 programa: definicion_programa
    7         | definicion_paquete

    8 definicion_programa: PROGRAMA nombre ';' bloque_programa

    9 nombre: identificador_cuatro_ptos_asterisco IDENTIFICADOR

   10 identificador_cuatro_ptos_asterisco: IDENTIFICADOR CUATRO_PTOS
   11                                    | identificador_cuatro_ptos_asterisco IDENTIFICADOR CUATRO_PTOS
   12                                    | /* empty */

   13 $@1: /* empty */

   14 bloque_programa: declaracion_cargas_interrogacion $@1 declaracion_tipos_interrogacion declaracion_constantes_interrogacion declaracion_variables_interrogacion bloque_instrucciones

   15 declaracion_cargas_interrogacion: declaracion_cargas
   16                                 | /* empty */

   17 declaracion_tipos_interrogacion: declaracion_tipos
   18                                | /* empty */

   19 declaracion_constantes_interrogacion: declaracion_constantes
   20                                     | /* empty */

   21 declaracion_variables_interrogacion: declaracion_variables
   22                                    | /* empty */

   23 bloque_instrucciones: '{' instruccion_mas '}'

   24 instruccion_mas: instruccion
   25                | instruccion_mas instruccion

   26 definicion_paquete: PAQUETE nombre ';' seccion_cabecera seccion_cuerpo

   27 $@2: /* empty */

   28 seccion_cabecera: CABECERA $@2 declaracion_cargas_interrogacion declaracion_tipos_interrogacion declaracion_constantes_interrogacion declaracion_variables_interrogacion declaracion_interfaces

   29 declaracion_interfaces_interrogacion: declaracion_interfaces
   30                                     | /* empty */

   31 $@3: /* empty */

   32 seccion_cuerpo: CUERPO $@3 declaracion_tipos_interrogacion declaracion_constantes_interrogacion declaracion_variables_interrogacion declaracion_subprograma_mas

   33 declaracion_subprograma_mas: declaracion_subprograma
   34                            | declaracion_subprograma_mas declaracion_subprograma

   35 declaracion_cargas: CARGA declaracion_carga_mas ';'

   36 declaracion_carga_mas: declaracion_carga
   37                      | declaracion_carga_mas declaracion_carga

   38 declaracion_carga: nombre en_path_interrogacion nombre_mas_interrogacion

   39 en_path_interrogacion: EN PATH
   40                      | /* empty */

   41 nombre_mas: nombre
   42           | nombre_mas nombre

   43 nombre_mas_interrogacion: '(' nombre_mas ')'
   44                         | /* empty */

   45 declaracion_tipos: TIPO declaracion_tipo_mas

   46 declaracion_tipo_mas: declaracion_tipo
   47                     | declaracion_tipo_mas declaracion_tipo

   48 declaracion_tipo: nombre '=' tipo_no_estructurado_o_nombre_tipo ';'
   49                 | nombre '=' tipo_estructurado

   50 tipo_no_estructurado_o_nombre_tipo: nombre
   51                                   | tipo_escalar
   52                                   | tipo_fichero
   53                                   | tipo_enumerado
   54                                   | tipo_lista
   55                                   | tipo_lista_asociativa
   56                                   | tipo_conjunto

   57 tipo_estructurado: tipo_registro
   58                  | declaracion_clase

   59 tipo_escalar: ENTERO
   60             | REAL
   61             | BOOLEANO
   62             | CARACTER
   63             | CADENA

   64 tipo_fichero: FICHERO

   65 tipo_enumerado: '(' expresion_constante_mas ')'

   66 expresion_constante_mas: expresion_constante
   67                        | expresion_constante_mas expresion_constante

   68 tipo_lista: LISTA rango_mas_interrogacion DE tipo_no_estructurado_o_nombre_tipo

   69 rango_mas: rango
   70          | rango_mas rango

   71 rango_mas_interrogacion: '[' rango_mas ']'
   72                        | /* empty */

   73 rango: expresion DOS_PTOS expresion expresion_interrogacion_ptos

   74 expresion_interrogacion_ptos: DOS_PTOS expresion
   75                             | /* empty */

   76 tipo_lista_asociativa: LISTA ASOCIATIVA DE tipo_no_estructurado_o_nombre_tipo

   77 tipo_conjunto: CONJUNTO DE tipo_no_estructurado_o_nombre_tipo

   78 tipo_registro: REGISTRO '{' declaracion_campo_mas '}'

   79 declaracion_campo_mas: declaracion_campo
   80                      | declaracion_campo_mas declaracion_campo

   81 declaracion_campo: nombre_mas ':' tipo_no_estructurado_o_nombre_tipo ';'

   82 expresion: /* empty */
   83          | expresion_constante
   84          | expresion_primaria

   85 $@4: /* empty */

   86 declaracion_clase: CLASE $@4 final_interrogacion nombre_mas_interrogacion '{' declaraciones_publicas declaraciones_semi_interrogacion declaraciones_privadas_interrogacion '}'

   87 final_interrogacion: FINAL
   88                    | /* empty */

   89 declaraciones_semi_interrogacion: declaraciones_semi
   90                                 | /* empty */

   91 declaraciones_privadas_interrogacion: declaraciones_privadas
   92                                     | /* empty */

   93 declaraciones_publicas: publico_interrogacion declaracion_componente_mas

   94 declaraciones_semi: SEMIPUBLICO declaracion_componente_mas

   95 declaraciones_privadas: PRIVADO declaracion_componente_mas

   96 publico_interrogacion: PUBLICO
   97                      | /* empty */

   98 declaracion_componente_mas: declaracion_componente
   99                           | declaracion_componente_mas declaracion_componente

  100 declaracion_componente: declaracion_tipo_anidado
  101                       | declaracion_constante_anidada
  102                       | declaracion_atributos
  103                       | cabecera_subprograma ';' modificadores_interrogacion

  104 modificadores_interrogacion: modificadores ';'
  105                            | /* empty */

  106 declaracion_tipo_anidado: TIPO declaracion_tipo

  107 declaracion_constante_anidada: CONSTANTE declaracion_constante

  108 declaracion_atributos: nombre_mas ':' tipo_no_estructurado_o_nombre_tipo ';'

  109 modificadores: modificador_mas

  110 modificador_mas: modificador
  111                | modificador_mas modificador

  112 modificador: GENERICO
  113            | ABSTRACTO
  114            | ESPECIFICO
  115            | FINAL

  116 declaracion_constantes: CONSTANTE declaracion_constante_mas

  117 declaracion_constante_mas: declaracion_constante
  118                          | declaracion_constante_mas declaracion_constante

  119 declaracion_constante: nombre ':' tipo_no_estructurado_o_nombre_tipo '=' valor_constante ';'

  120 valor_constante: expresion
  121                | '[' valor_constante_mas ']'
  122                | '[' clave_valor_mas ']'
  123                | '[' campo_valor_mas ']'

  124 valor_constante_mas: valor_constante
  125                    | valor_constante_mas valor_constante

  126 clave_valor_mas: clave_valor
  127                | clave_valor_mas clave_valor

  128 campo_valor_mas: campo_valor
  129                | campo_valor_mas campo_valor

  130 clave_valor: CTC_CADENA FLECHA_DOBLE valor_constante

  131 campo_valor: nombre FLECHA_DOBLE valor_constante

  132 declaracion_variables: VARIABLE declaracion_variable_mas

  133 declaracion_variable_mas: declaracion_variable
  134                         | declaracion_variable_mas declaracion_variable

  135 $@5: /* empty */

  136 declaracion_variable: nombre_mas ':' tipo_no_estructurado_o_nombre_tipo $@5 valor_constante_interrogacion ';'

  137 valor_constante_interrogacion: '=' valor_constante
  138                              | /* empty */

  139 declaracion_interfaces: INTERFAZ cabecera_subprograma_mas

  140 cabecera_subprograma_mas: cabecera_subprograma ';'
  141                         | cabecera_subprograma_mas cabecera_subprograma ';'

  142 declaracion_subprograma: cabecera_subprograma bloque_subprograma

  143 cabecera_subprograma: cabecera_funcion
  144                     | cabecera_procedimiento
  145                     | cabecera_constructor
  146                     | cabecera_destructor

  147 $@6: /* empty */

  148 cabecera_funcion: FUNCION $@6 nombre declaracion_parametros_interrogacion FLECHA_DOBLE tipo_no_estructurado_o_nombre_tipo

  149 declaracion_parametros_interrogacion: declaracion_parametros
  150                                     | /* empty */

  151 cabecera_procedimiento: PROCEDIMIENTO nombre declaracion_parametros_interrogacion

  152 cabecera_constructor: CONSTRUCTOR nombre declaracion_parametros_interrogacion

  153 cabecera_destructor: DESTRUCTOR nombre

  154 declaracion_parametros: '(' lista_parametros_formales ')'

  155 lista_parametros_formales: parametros_formales
  156                          | lista_parametros_formales ';' parametros_formales

  157 parametros_formales: nombre_mas ':' tipo_no_estructurado_o_nombre_tipo modificable_interrogacion

  158 modificable_interrogacion: MODIFICABLE
  159                          | /* empty */

  160 $@7: /* empty */

  161 bloque_subprograma: declaracion_tipos_interrogacion $@7 declaracion_constantes_interrogacion declaracion_variables_interrogacion bloque_instrucciones

  162 instruccion: ';'
  163            | instruccion_asignacion
  164            | instruccion_salir
  165            | instruccion_devolver
  166            | instruccion_llamada
  167            | instruccion_si
  168            | instruccion_casos
  169            | instruccion_bucle
  170            | instruccion_probar_excepto
  171            | instruccion_lanzar

  172 instruccion_asignacion: objeto '=' expresion ';'

  173 instruccion_salir: SALIR si_expresion_interrogacion ';'

  174 si_expresion_interrogacion: SI expresion
  175                           | /* empty */

  176 instruccion_devolver: DEVOLVER expresion_interrogacion ';'

  177 expresion_interrogacion: expresion
  178                        | /* empty */

  179 instruccion_llamada: llamada_subprograma ';'

  180 llamada_subprograma: nombre '(' expresion_asterisco ')'

  181 expresion_asterisco: expresion
  182                    | expresion_asterisco expresion
  183                    | /* empty */

  184 $@8: /* empty */

  185 $@9: /* empty */

  186 instruccion_si: SI expresion $@8 ENTONCES bloque_instrucciones $@9 bloque_instrucciones_sino_interrogacion

  187 bloque_instrucciones_sino_interrogacion: SINO bloque_instrucciones
  188                                        | /* empty */

  189 instruccion_casos: EN CASO expresion SEA caso_mas ';'

  190 caso_mas: caso
  191         | caso_mas caso

  192 caso: CUANDO entradas FLECHA_DOBLE bloque_instrucciones

  193 entradas: entrada_asterisco entrada

  194 entrada_asterisco: entrada '|'
  195                  | entrada_asterisco entrada '|'
  196                  | /* empty */

  197 entrada: expresion
  198        | rango
  199        | OTRO

  200 instruccion_bucle: clausula_iteracion bloque_instrucciones

  201 clausula_iteracion: PARA nombre EN objeto
  202                   | REPITE ELEMENTO nombre EN rango descendente_interrogacion
  203                   | MIENTRAS expresion
  204                   | REPITE HASTA expresion

  205 descendente_interrogacion: DESCENDENTE
  206                          | /* empty */

  207 $@10: /* empty */

  208 $@11: /* empty */

  209 instruccion_probar_excepto: PROBAR bloque_instrucciones $@10 EXCEPTO clausula_excepcion_mas $@11 bloque_instrucciones_final_interrogacion

  210 clausula_excepcion_mas: clausula_excepcion
  211                       | clausula_excepcion_mas clausula_excepcion

  212 bloque_instrucciones_final_interrogacion: FINALMENTE bloque_instrucciones
  213                                         | /* empty */

  214 clausula_excepcion: CUANDO nombre EJECUTA bloque_instrucciones

  215 instruccion_lanzar: LANZAR nombre ';'

  216 expresion_primaria: expresion_constante
  217                   | objeto
  218                   | llamada_subprograma
  219                   | '(' expresion ')'

  220 objeto: nombre
  221       | objeto '[' expresion ']'
  222       | objeto '.' IDENTIFICADOR

  223 expresion_unaria: '-' expresion
  224                 | '!' expresion

  225 expresion_binaria: /* empty */
  226                  | /* empty */

  227 expresion_mas: expresion
  228              | expresion_mas expresion


Grammar

    0 $accept: expresion_constante $end

    1 expresion_constante: CTC_ENTERA
    2                    | CTC_REAL
    3                    | CTC_CADENA
    4                    | CTC_CARACTER
    5                    | CTC_BOOLEANA


Terminals, with rules where they appear

$end (0) 0
'!' (33)
'%' (37)
'(' (40)
')' (41)
'*' (42)
'-' (45)
'.' (46)
'/' (47)
':' (58)
';' (59)
'=' (61)
'[' (91)
']' (93)
'{' (123)
'|' (124)
'}' (125)
error (256)
ABSTRACTO (258)
AND (259)
ASOCIATIVA (260)
BOOLEANO (261)
CABECERA (262)
CADENA (263)
CASO (264)
CARACTER (265)
CARGA (266)
CLASE (267)
CONJUNTO (268)
CONSTANTE (269)
CUERPO (270)
CTC_BOOLEANA (271) 5
CTC_CADENA (272) 3
CTC_CARACTER (273) 4
CONSTRUCTOR (274)
CUANDO (275)
CUATRO_PTOS (276)
DESCENDENTE (277)
DESPD (278)
DESPI (279)
DESTRUCTOR (280)
DE (281)
DEVOLVER (282)
DOS_PTOS (283)
EJECUTA (284)
ELEMENTO (285)
EN (286)
ENTERO (287)
ENTONCES (288)
EQ (289)
ESPECIFICO (290)
EXCEPTO (291)
FICHERO (292)
FINAL (293)
FINALMENTE (294)
FLECHA_DOBLE (295)
FUNCION (296)
GEQ (297)
GENERICO (298)
HASTA (299)
IDENTIFICADOR (300)
INTERFAZ (301)
LANZAR (302)
LEQ (303)
LISTA (304)
MIENTRAS (305)
MODIFICABLE (306)
NEQ (307)
OTRO (308)
OR (309)
PAQUETE (310)
PARA (311)
PATH (312)
POTENCIA (313)
PRIVADO (314)
PROBAR (315)
PROCEDIMIENTO (316)
PROGRAMA (317)
PUBLICO (318)
REAL (319)
REGISTRO (320)
REPITE (321)
SEA (322)
SALIR (323)
SEMIPUBLICO (324)
SI (325)
SINO (326)
TIPO (327)
VARIABLE (328)
CTC_ENTERA (329) 1
CTC_REAL (330) 2


Nonterminals, with rules where they appear

$accept (92)
    on left: 0
expresion_constante (93)
    on left: 1 2 3 4 5, on right: 0


State 0

    0 $accept: . expresion_constante $end

    CTC_BOOLEANA  shift, and go to state 1
    CTC_CADENA    shift, and go to state 2
    CTC_CARACTER  shift, and go to state 3
    CTC_ENTERA    shift, and go to state 4
    CTC_REAL      shift, and go to state 5

    expresion_constante  go to state 6


State 1

    5 expresion_constante: CTC_BOOLEANA .

    $default  reduce using rule 5 (expresion_constante)


State 2

    3 expresion_constante: CTC_CADENA .

    $default  reduce using rule 3 (expresion_constante)


State 3

    4 expresion_constante: CTC_CARACTER .

    $default  reduce using rule 4 (expresion_constante)


State 4

    1 expresion_constante: CTC_ENTERA .

    $default  reduce using rule 1 (expresion_constante)


State 5

    2 expresion_constante: CTC_REAL .

    $default  reduce using rule 2 (expresion_constante)


State 6

    0 $accept: expresion_constante . $end

    $end  shift, and go to state 7


State 7

    0 $accept: expresion_constante $end .

    $default  accept
